!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=4)}([function(t,e,n){(function(t){var r=Object.getOwnPropertyDescriptors||function(t){for(var e=Object.keys(t),n={},r=0;r<e.length;r++)n[e[r]]=Object.getOwnPropertyDescriptor(t,e[r]);return n},i=/%[sdj%]/g;e.format=function(t){if(!m(t)){for(var e=[],n=0;n<arguments.length;n++)e.push(a(arguments[n]));return e.join(" ")}n=1;for(var r=arguments,o=r.length,s=String(t).replace(i,function(t){if("%%"===t)return"%";if(n>=o)return t;switch(t){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(t){return"[Circular]"}default:return t}}),u=r[n];n<o;u=r[++n])y(u)||!E(u)?s+=" "+u:s+=" "+a(u);return s},e.deprecate=function(n,r){if(void 0!==t&&!0===t.noDeprecation)return n;if(void 0===t)return function(){return e.deprecate(n,r).apply(this,arguments)};var i=!1;return function(){if(!i){if(t.throwDeprecation)throw new Error(r);t.traceDeprecation?console.trace(r):console.error(r),i=!0}return n.apply(this,arguments)}};var o,s={};function a(t,n){var r={seen:[],stylize:c};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),d(n)?r.showHidden=n:n&&e._extend(r,n),b(r.showHidden)&&(r.showHidden=!1),b(r.depth)&&(r.depth=2),b(r.colors)&&(r.colors=!1),b(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=u),l(r,t,r.depth)}function u(t,e){var n=a.styles[e];return n?"["+a.colors[n][0]+"m"+t+"["+a.colors[n][1]+"m":t}function c(t,e){return t}function l(t,n,r){if(t.customInspect&&n&&v(n.inspect)&&n.inspect!==e.inspect&&(!n.constructor||n.constructor.prototype!==n)){var i=n.inspect(r,t);return m(i)||(i=l(t,i,r)),i}var o=function(t,e){if(b(e))return t.stylize("undefined","undefined");if(m(e)){var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string")}if(g(e))return t.stylize(""+e,"number");if(d(e))return t.stylize(""+e,"boolean");if(y(e))return t.stylize("null","null")}(t,n);if(o)return o;var s=Object.keys(n),a=function(t){var e={};return t.forEach(function(t,n){e[t]=!0}),e}(s);if(t.showHidden&&(s=Object.getOwnPropertyNames(n)),w(n)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return h(n);if(0===s.length){if(v(n)){var u=n.name?": "+n.name:"";return t.stylize("[Function"+u+"]","special")}if(O(n))return t.stylize(RegExp.prototype.toString.call(n),"regexp");if(S(n))return t.stylize(Date.prototype.toString.call(n),"date");if(w(n))return h(n)}var c,E="",T=!1,P=["{","}"];(f(n)&&(T=!0,P=["[","]"]),v(n))&&(E=" [Function"+(n.name?": "+n.name:"")+"]");return O(n)&&(E=" "+RegExp.prototype.toString.call(n)),S(n)&&(E=" "+Date.prototype.toUTCString.call(n)),w(n)&&(E=" "+h(n)),0!==s.length||T&&0!=n.length?r<0?O(n)?t.stylize(RegExp.prototype.toString.call(n),"regexp"):t.stylize("[Object]","special"):(t.seen.push(n),c=T?function(t,e,n,r,i){for(var o=[],s=0,a=e.length;s<a;++s)D(e,String(s))?o.push(p(t,e,n,r,String(s),!0)):o.push("");return i.forEach(function(i){i.match(/^\d+$/)||o.push(p(t,e,n,r,i,!0))}),o}(t,n,r,a,s):s.map(function(e){return p(t,n,r,a,e,T)}),t.seen.pop(),function(t,e,n){if(t.reduce(function(t,e){return 0,e.indexOf("\n")>=0&&0,t+e.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60)return n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1];return n[0]+e+" "+t.join(", ")+" "+n[1]}(c,E,P)):P[0]+E+P[1]}function h(t){return"["+Error.prototype.toString.call(t)+"]"}function p(t,e,n,r,i,o){var s,a,u;if((u=Object.getOwnPropertyDescriptor(e,i)||{value:e[i]}).get?a=u.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):u.set&&(a=t.stylize("[Setter]","special")),D(r,i)||(s="["+i+"]"),a||(t.seen.indexOf(u.value)<0?(a=y(n)?l(t,u.value,null):l(t,u.value,n-1)).indexOf("\n")>-1&&(a=o?a.split("\n").map(function(t){return"  "+t}).join("\n").substr(2):"\n"+a.split("\n").map(function(t){return"   "+t}).join("\n")):a=t.stylize("[Circular]","special")),b(s)){if(o&&i.match(/^\d+$/))return a;(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=t.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=t.stylize(s,"string"))}return s+": "+a}function f(t){return Array.isArray(t)}function d(t){return"boolean"==typeof t}function y(t){return null===t}function g(t){return"number"==typeof t}function m(t){return"string"==typeof t}function b(t){return void 0===t}function O(t){return E(t)&&"[object RegExp]"===T(t)}function E(t){return"object"==typeof t&&null!==t}function S(t){return E(t)&&"[object Date]"===T(t)}function w(t){return E(t)&&("[object Error]"===T(t)||t instanceof Error)}function v(t){return"function"==typeof t}function T(t){return Object.prototype.toString.call(t)}function P(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(n){if(b(o)&&(o=t.env.NODE_DEBUG||""),n=n.toUpperCase(),!s[n])if(new RegExp("\\b"+n+"\\b","i").test(o)){var r=t.pid;s[n]=function(){var t=e.format.apply(e,arguments);console.error("%s %d: %s",n,r,t)}}else s[n]=function(){};return s[n]},e.inspect=a,a.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},a.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=f,e.isBoolean=d,e.isNull=y,e.isNullOrUndefined=function(t){return null==t},e.isNumber=g,e.isString=m,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=b,e.isRegExp=O,e.isObject=E,e.isDate=S,e.isError=w,e.isFunction=v,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=n(2);var I=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function D(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){var t,n;console.log("%s - %s",(t=new Date,n=[P(t.getHours()),P(t.getMinutes()),P(t.getSeconds())].join(":"),[t.getDate(),I[t.getMonth()],n].join(" ")),e.format.apply(e,arguments))},e.inherits=n(3),e._extend=function(t,e){if(!e||!E(e))return t;for(var n=Object.keys(e),r=n.length;r--;)t[n[r]]=e[n[r]];return t};var _="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function A(t,e){if(!t){var n=new Error("Promise was rejected with a falsy value");n.reason=t,t=n}return e(t)}e.promisify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');if(_&&t[_]){var e;if("function"!=typeof(e=t[_]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,_,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,n,r=new Promise(function(t,r){e=t,n=r}),i=[],o=0;o<arguments.length;o++)i.push(arguments[o]);i.push(function(t,r){t?n(t):e(r)});try{t.apply(this,i)}catch(t){n(t)}return r}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),_&&Object.defineProperty(e,_,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,r(t))},e.promisify.custom=_,e.callbackify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');function n(){for(var n=[],r=0;r<arguments.length;r++)n.push(arguments[r]);var i=n.pop();if("function"!=typeof i)throw new TypeError("The last argument must be of type Function");var o=this,s=function(){return i.apply(o,arguments)};e.apply(this,n).then(function(e){t.nextTick(s,null,e)},function(e){t.nextTick(A,e,s)})}return Object.setPrototypeOf(n,Object.getPrototypeOf(e)),Object.defineProperties(n,r(e)),n}}).call(this,n(1))},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(t){r=s}}();var u,c=[],l=!1,h=-1;function p(){l&&u&&(l=!1,u.length?c=u.concat(c):h=-1,c.length&&f())}function f(){if(!l){var t=a(p);l=!0;for(var e=c.length;e;){for(u=c,c=[];++h<e;)u&&u[h].run();h=-1,e=c.length}u=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function y(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new d(t,e)),1!==c.length||l||a(f)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=y,i.addListener=y,i.once=y,i.off=y,i.removeListener=y,i.removeAllListeners=y,i.emit=y,i.prependListener=y,i.prependOnceListener=y,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e){t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){"use strict";n.r(e);const r={OBSTACLE_SPEED:4,SIDEWALK_SPEED:4,GAP_HEIGHT:150,OBSTACLE_WIDTH:150,OBSTACLE_HEIGHT:150,EDGE_BUFFER:50,OBSTACLE_SPACING:350,SIDEWALK_SPACING:150,WARM_UP_SECONDS:1,HOTDOG_STAND_WIDTH:300,HOTDOG_STAND_HEIGHT:350};var i=class{constructor(t){this.dimensions=t;const e=new Image;e.src="./assets/hot-dog-stand.png";const n=this.dimensions.width+60*r.WARM_UP_SECONDS*r.OBSTACLE_SPEED;this.sidewalkLines=[this.sidewalkLine(80),this.sidewalkLine(80+r.SIDEWALK_SPACING),this.sidewalkLine(80+2*r.SIDEWALK_SPACING)],this.hotdogStand={left:300,top:40,img:e},this.obstacleImg=new Image,this.obstacleImg.src="./assets/bush.png",this.obstacles=[this.randomObstacle(n),this.randomObstacle(n+r.OBSTACLE_SPACING),this.randomObstacle(n+2*r.OBSTACLE_SPACING)]}animate(t){this.drawBackground(t),this.moveSidewalkLines(),this.drawSidewalkLines(t),this.moveHotdogStand(),this.drawHotdogStand(t),this.moveObstacles(),this.drawObstacles(t)}drawBackground(t){t.fillStyle="#DDDDDD",t.fillRect(0,0,this.dimensions.width,this.dimensions.height);for(let e=1;e<4;e+=1.3)t.fillStyle="black",t.lineWidth=2,t.beginPath(),t.moveTo(0,3.8*r.EDGE_BUFFER*e),t.lineTo(480,3.8*r.EDGE_BUFFER*e),t.stroke()}sidewalkLine(t){return{left:t}}moveSidewalkLines(){if(this.eachSidewalkLine(t=>{t.left-=r.SIDEWALK_SPEED}),this.sidewalkLines[0].left<=0){this.sidewalkLines.shift();const t=this.sidewalkLines[1].left+r.SIDEWALK_SPACING;this.sidewalkLines.push(this.sidewalkLine(t))}}drawSidewalkLines(t){this.eachSidewalkLine(e=>{t.fillStyle="Black",t.lineWidth=2,t.beginPath(),t.moveTo(e.left,0),t.lineTo(e.left,640),t.stroke()})}eachSidewalkLine(t){this.sidewalkLines.forEach(t.bind(this))}moveHotdogStand(){this.hotdogStand.left-=r.SIDEWALK_SPEED}drawHotdogStand(t){t.drawImage(this.hotdogStand.img,this.hotdogStand.left,this.hotdogStand.top,r.HOTDOG_STAND_WIDTH,r.HOTDOG_STAND_HEIGHT)}randomObstacle(t){const e=this.dimensions.height-2*r.EDGE_BUFFER-r.GAP_HEIGHT,n=Math.random()*e+r.EDGE_BUFFER;return{img:this.obstacleImg,topObstacle:{left:t,right:r.OBSTACLE_WIDTH+t,top:n-r.OBSTACLE_HEIGHT,bottom:n},bottomObstacle:{left:t,right:r.OBSTACLE_WIDTH+t,top:n+r.GAP_HEIGHT,bottom:n+r.GAP_HEIGHT+r.OBSTACLE_HEIGHT}}}moveObstacles(){if(this.eachObstacle(t=>{t.topObstacle.left-=r.OBSTACLE_SPEED,t.topObstacle.right-=r.OBSTACLE_SPEED,t.bottomObstacle.left-=r.OBSTACLE_SPEED,t.bottomObstacle.right-=r.OBSTACLE_SPEED}),this.obstacles[0].topObstacle.right<=0){this.obstacles.shift();const t=this.obstacles[1].topObstacle.left+r.OBSTACLE_SPACING;this.obstacles.push(this.randomObstacle(t))}}drawObstacles(t){this.eachObstacle(e=>{t.drawImage(e.img,e.topObstacle.left,e.topObstacle.top,r.OBSTACLE_WIDTH,e.topObstacle.bottom-e.topObstacle.top),t.drawImage(e.img,e.bottomObstacle.left,e.bottomObstacle.top,r.OBSTACLE_WIDTH,e.bottomObstacle.bottom-e.bottomObstacle.top)})}eachObstacle(t){this.obstacles.forEach(t.bind(this))}collidesWith(t){let e=!1;const n=(t,e)=>{let n,r,i=(t.left+t.right)/2,o=(t.top+t.bottom)/2,s=t.right-i;return n=e.left>i?e.left:e.right<i?e.right:i,r=e.top>o?e.top:e.bottom<o?e.bottom:o,Math.hypot(n-i,r-o)<s};return this.eachObstacle(r=>{(n(r.topObstacle,t)||n(r.bottomObstacle,t))&&(e=!0)}),e}};var o=class{constructor(t){this.dimensions=t,this.x=this.dimensions.width/3,this.y=this.dimensions.height/1.5,this.scrX,this.scrY,this.sheetWidth=266,this.sheetHeight=200,this.frameCount=2,this.width=this.sheetWidth/this.frameCount,this.height=this.sheetHeight/this.frameCount,this.currentFrame=0,this.puppyImg=new Image,this.puppyImg.src="./assets/run-corgi-2.png"}movePuppy(t,e){this.x+=t,this.y+=e}animate(t){this.puppyID=setInterval(()=>{this.drawPuppy(t)},300)}updateFrame(){this.currentFrame=++this.currentFrame%this.frameCount,this.srcX=this.currentFrame*this.width,this.srcY=0}drawPuppy(t){this.updateFrame(),t.clearRect(0,0,480,640),t.drawImage(this.puppyImg,this.srcX,this.srcY,this.width,this.height,this.x,this.y,this.width,this.height)}bounds(){return{left:this.x+20,right:this.x+100,bottom:this.y+82,top:this.y+20}}outOfBounds(){const t=this.y<0,e=this.y+82>this.dimensions.height;return t||e}};const s={PUPPY_VELOCITY:-50};var a=class{constructor(t,e){this.ctx=t.getContext("2d"),this.playerCtx=e.getContext("2d"),this.dimensions={width:t.width,height:t.height},this.lose=!1,this.running=!1,this.playButton=document.getElementById("audio-button"),this.audioContext=new AudioContext,this.audioElement=document.getElementById("audio-background"),this.track=this.audioContext.createMediaElementSource(this.audioElement),this.score=0,this.registerEvents(),this.restart()}play(){this.running=!0,this.animate()}restart(){this.score=0,this.updateScore(),document.getElementsByClassName("start-msg")[0].style.display="flex",this.lose=!1,this.puppy=new o(this.dimensions),this.level=new i(this.dimensions),this.animate(),this.puppy.animate(this.playerCtx)}updateScore(){!1===this.lose?this.score+=1:this.score=0;let t=Number(this.score),e=Math.floor(t%3600/60),n=Math.floor(t%3600%60),r=("0"+e).slice(-2)+":"+("0"+n).slice(-2);document.getElementsByClassName("timer")[0].innerHTML=r}registerEvents(){this.boundKeyPressedHandler=this.keyPressed.bind(this),document.addEventListener("keydown",this.boundKeyPressedHandler),this.boundPlayButtonPressedHandler=this.playButtonPressed.bind(this),this.playButton.addEventListener("click",this.boundPlayButtonPressedHandler)}keyPressed(t){if(!this.running){document.getElementsByClassName("start-msg")[0].style.display="none",this.scoreID=setInterval(this.updateScore.bind(this),500),this.running=!0,this.play();let t=this.playButton.click();this.playButtonPressed(t)}let e=t.key||t.keycode;"Escape"==e&&"Esc"==e&&27==e||(38===e||"ArrowUp"==e?this.puppy.movePuppy(0,s.PUPPY_VELOCITY):40===e||"ArrowDown"==e?this.puppy.movePuppy(0,Math.abs(s.PUPPY_VELOCITY)):37===e||"ArrowLeft"==e?this.puppy.movePuppy(s.PUPPY_VELOCITY,0):39!==e&&"ArrowRight"!=e||this.puppy.movePuppy(Math.abs(s.PUPPY_VELOCITY),0))}playButtonPressed(t){this.track.connect(this.audioContext.destination),this.audioElement.crossOrigin="anonymous","suspended"===this.audioContext.state&&this.audioContext.resume(),"false"===t.currentTarget.dataset.playing?(this.audioElement.play(),t.currentTarget.dataset.playing="true"):"true"===t.currentTarget.dataset.playing&&(this.audioElement.pause(),t.currentTarget.dataset.playing="false")}highScores(){let t=document.getElementById("leaderboard");if("undefined"!=typeof Storage){let n=!1;if(localStorage["high-scores"]){t.style.display="block",t.innerHTML="",n=(n=JSON.parse(localStorage["high-scores"])).sort((t,e)=>parseInt(e)-parseInt(t));for(var e=0;e<10;e++){let r=n[e],i=document.createElement("li");i.setAttribute("class","leader"),i.innerHTML=void 0!==r?r:"",t.appendChild(i)}}}else t.style.display="none"}updateScores(){if("undefined"!=typeof Storage){let t=parseInt(this.score),e=!1;if(localStorage["high-scores"]){e=(e=JSON.parse(localStorage["high-scores"])).sort(function(t,e){return parseInt(e)-parseInt(t)});for(let n=0;n<10;n++){let r=parseInt(e[n]),i=isNaN(r)?0:r;if(t>i){i=t,e.splice(n,0,parseInt(t));break}}e.length=10,localStorage["high-scores"]=JSON.stringify(e)}else{let e=new Array;e[0]=t,localStorage["high-scores"]=JSON.stringify(e)}this.highScores()}}gameOver(){return this.level.collidesWith(this.puppy.bounds())||this.puppy.outOfBounds(this.height)}animate(){this.level.animate(this.ctx),this.gameOver()&&(this.lose=!0,this.running=!1,alert(this.score),this.updateScores(),clearInterval(this.puppy.puppyID),clearInterval(this.scoreID),this.restart()),this.running&&(this.requestId=requestAnimationFrame(this.animate.bind(this)))}};n(0);new a(document.getElementById("chili-dog-game"),document.getElementById("player"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,